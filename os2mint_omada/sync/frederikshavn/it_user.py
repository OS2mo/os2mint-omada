# SPDX-FileCopyrightText: Magenta ApS <https://magenta.dk>
# SPDX-License-Identifier: MPL-2.0
from __future__ import annotations

import asyncio
from collections import defaultdict
from uuid import UUID

import structlog
from fastramqpi.ramqp.depends import handle_exclusively_decorator
from pydantic import parse_obj_as

from os2mint_omada.mo import MO
from os2mint_omada.omada.api import OmadaAPI

from ...autogenerated_graphql_client import ITUserCreateInput
from ...autogenerated_graphql_client import RAValidityInput
from ..models import ComparableITUser
from ..models import ITUser
from .models import FrederikshavnOmadaUser

logger = structlog.stdlib.get_logger()


@handle_exclusively_decorator(key=lambda employee_uuid, *_, **__: employee_uuid)
async def sync_it_users(
    employee_uuid: UUID,
    mo: MO,
    omada_api: OmadaAPI,
) -> None:
    logger.info("Synchronising IT users", employee_uuid=employee_uuid)

    # Maps from Omada user attribute to IT system user key in MO
    it_user_map: dict[str, str] = {
        "ad_login": "omada_ad_login",
    }

    # Get MO classes configuration
    it_systems = await mo.get_it_systems(user_keys=list(it_user_map.values()))
    omada_it_systems = [it_systems[user_key] for user_key in it_user_map.values()]

    # Get current user data from MO
    mo_it_users = await mo.get_employee_it_users(
        uuid=employee_uuid,
        it_systems=omada_it_systems,
    )
    mo_engagements = await mo.get_employee_engagements(uuid=employee_uuid)

    # Get current user data from Omada. Note that we are fetching Omada users for
    # ALL engagements to avoid deleting too many IT users
    engagements = {e.user_key: e for e in mo_engagements}
    raw_omada_users = await omada_api.get_users_by(
        "C_MEDARBEJDERNR_ODATA", engagements.keys()
    )
    omada_users = parse_obj_as(list[FrederikshavnOmadaUser], raw_omada_users)

    # Existing IT users in MO
    existing: defaultdict[ComparableITUser, set[ITUser]] = defaultdict(set)
    for mo_it_user in mo_it_users:
        comparable_it_user = ComparableITUser(**mo_it_user.dict())
        existing[comparable_it_user].add(mo_it_user)

    # Desired IT users from Omada
    desired = set()
    for omada_user in omada_users:
        for omada_attr, mo_it_system_user_key in it_user_map.items():
            omada_value = getattr(omada_user, omada_attr)
            if omada_value is None:
                continue
            c = ComparableITUser(
                user_key=str(omada_value),
                it_system=it_systems[mo_it_system_user_key],
                person=employee_uuid,
                engagement=engagements[omada_user.employee_number].uuid,
                validity=omada_user.validity,
            )
            desired.add(c)

    # Delete excess existing
    excess: set[ITUser] = set()
    for comparable_it_user, it_users in existing.items():
        first, *duplicate = it_users
        excess.update(duplicate)
        if comparable_it_user not in desired:
            excess.add(first)
    if excess:
        logger.info("Deleting excess IT users", it_users=excess)
        await asyncio.gather(*(mo.delete_it_user(a) for a in excess))

    # Create missing desired
    missing_comparable = desired - existing.keys()
    missing_mo = [ITUser(**it_user.dict()) for it_user in missing_comparable]
    if missing_mo:
        logger.info("Creating missing IT users", users=missing_mo)
        for missing in missing_mo:
            await mo.graphql_client.create_it_user(
                ITUserCreateInput(
                    user_key=missing.user_key,
                    itsystem=missing.it_system,
                    person=missing.person,
                    engagement=missing.engagement,
                    validity=RAValidityInput(
                        from_=missing.validity.start,
                        to=missing.validity.end,
                    ),
                )
            )

# SPDX-FileCopyrightText: Magenta ApS <https://magenta.dk>
# SPDX-License-Identifier: MPL-2.0
from __future__ import annotations

from collections import defaultdict

import structlog
from fastramqpi.ramqp.depends import handle_exclusively_decorator

from os2mint_omada.autogenerated_graphql_client import EmployeeCreateInput
from os2mint_omada.mo import MO
from os2mint_omada.omada.event_generator import Event
from os2mint_omada.sync.egedal.models import EgedalOmadaUser
from os2mint_omada.sync.egedal.models import ManualEgedalOmadaUser
from os2mint_omada.sync.models import ComparableEmployee
from os2mint_omada.sync.models import Employee

logger = structlog.stdlib.get_logger()


@handle_exclusively_decorator(key=lambda omada_user, *_, **__: omada_user.cpr_number)
async def sync_employee(
    omada_user: ManualEgedalOmadaUser,
    mo: MO,
) -> None:
    logger.info("Synchronising employee", omada_user=omada_user)

    # Find employee in MO
    employee_uuid = await mo.get_employee_uuid_from_cpr(omada_user.cpr_number)

    employee_states: set[Employee] = set()
    if employee_uuid is not None:
        employee_states = await mo.get_employee_states(uuid=employee_uuid)

    # Existing employee states in MO
    existing: defaultdict[ComparableEmployee, set[Employee]] = defaultdict(set)
    for mo_employee_state in employee_states:
        comparable_employee = ComparableEmployee(**mo_employee_state.dict())
        existing[comparable_employee].add(mo_employee_state)

    # Desired employee states from Omada (only one)
    desired = {
        ComparableEmployee(  # type: ignore[call-arg]
            givenname=omada_user.first_name,
            surname=omada_user.last_name,
            cpr_no=omada_user.cpr_number,
            nickname_givenname=omada_user.nickname_first_name,
            nickname_surname=omada_user.nickname_last_name,
        )
    }

    # Delete excess existing
    # TODO: Implement when supported by MO

    # Create missing desired
    missing_comparable = desired - existing.keys()
    missing_mo = [Employee(**employee.dict()) for employee in missing_comparable]
    if missing_mo:
        logger.info("Creating missing Employee states", employees=missing_mo)
        for missing in missing_mo:
            # GraphQL employee_create actually updates if the employee already exists.
            # This is better than an explicit update, since that would require us to
            # calculate the validity manually based on CPR.
            await mo.graphql_client.create_employee(
                EmployeeCreateInput(
                    uuid=employee_uuid,
                    given_name=missing.given_name,
                    surname=missing.surname,
                    cpr_number=missing.cpr_number,
                    nickname_given_name=missing.nickname_given_name,
                    nickname_surname=missing.nickname_surname,
                )
            )


@handle_exclusively_decorator(key=lambda omada_user, *_, **__: omada_user.cpr_number)
async def sync_employee_nickname(
    event: Event,
    omada_user: EgedalOmadaUser,
    mo: MO,
) -> None:
    """Synchronise Omada nicknames to pre-existing MO employees."""
    logger.info("Synchronising employee nicknames", omada_user=omada_user)

    # Find employee in MO
    employee_uuid = await mo.get_employee_uuid_from_cpr(omada_user.cpr_number)
    if employee_uuid is None:
        return

    # Existing employee states in MO
    mo_employee_state = await mo.get_current_employee_state(uuid=employee_uuid)
    if mo_employee_state is None:
        return

    # Desired employee state with nickname from Omada
    if event == Event.DELETE:
        desired_nickname_givenname = None
        desired_nickname_surname = None
    else:
        desired_nickname_givenname = omada_user.nickname_first_name
        desired_nickname_surname = omada_user.nickname_last_name

    desired = mo_employee_state.copy(
        update=dict(
            nickname_givenname=desired_nickname_givenname,
            nickname_surname=desired_nickname_surname,
        )
    )

    # Create missing desired
    if mo_employee_state == desired:
        return
    logger.info("Creating Employeee state with missing nickname", employees=desired)
    # GraphQL employee_create actually updates if the employee already exists.
    # This is better than an explicit update, since that would require us to
    # calculate the validity manually based on CPR.
    await mo.graphql_client.create_employee(
        EmployeeCreateInput(
            uuid=desired.uuid,
            given_name=desired.given_name,
            surname=desired.surname,
            cpr_number=desired.cpr_number,
            nickname_given_name=desired.nickname_given_name,
            nickname_surname=desired.nickname_surname,
        )
    )

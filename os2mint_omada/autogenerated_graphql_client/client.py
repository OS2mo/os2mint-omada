# Generated by ariadne-codegen on 2023-06-13 15:32
# Source: queries.graphql

from datetime import datetime
from typing import Any, List, Optional, Union
from uuid import UUID

from .async_base_client import AsyncBaseClient
from .base_model import UNSET, UnsetType
from .create_it_user import CreateItUser, CreateItUserItuserCreate
from .get_employees import GetEmployees, GetEmployeesEmployees


def gql(q: str) -> str:
    return q


class Client(AsyncBaseClient):
    async def get_employees(
        self, limit: Union[Optional[Any], UnsetType] = UNSET
    ) -> List[GetEmployeesEmployees]:
        query = gql(
            """
            query GetEmployees($limit: int = 10) {
              employees(limit: $limit) {
                objects {
                  uuid
                  uuid
                  user_key
                  name
                  cpr_no
                }
              }
            }
            """
        )
        variables: dict[str, object] = {"limit": limit}
        response = await self.execute(query=query, variables=variables)
        data = self.get_data(response)
        return GetEmployees.parse_obj(data).employees

    async def create_it_user(
        self,
        itsystem: UUID,
        from_: datetime,
        user_key: str,
        person: Union[Optional[UUID], UnsetType] = UNSET,
    ) -> CreateItUserItuserCreate:
        query = gql(
            """
            mutation CreateItUser($itsystem: UUID!, $from: DateTime!, $user_key: String!, $person: UUID = "") {
              ituser_create(
                input: {user_key: $user_key, itsystem: $itsystem, validity: {from: $from}, person: $person}
              ) {
                uuid
              }
            }
            """
        )
        variables: dict[str, object] = {
            "itsystem": itsystem,
            "from": from_,
            "user_key": user_key,
            "person": person,
        }
        response = await self.execute(query=query, variables=variables)
        data = self.get_data(response)
        return CreateItUser.parse_obj(data).ituser_create

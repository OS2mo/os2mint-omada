# Generated by ariadne-codegen on 2023-11-03 13:26
# Source: queries.graphql
from datetime import datetime
from typing import Any
from typing import List
from typing import Optional

from pydantic import Field

from .base_model import BaseModel


class TestingEmployeeQuery(BaseModel):
    employees: "TestingEmployeeQueryEmployees"


class TestingEmployeeQueryEmployees(BaseModel):
    objects: List["TestingEmployeeQueryEmployeesObjects"]


class TestingEmployeeQueryEmployeesObjects(BaseModel):
    objects: List["TestingEmployeeQueryEmployeesObjectsObjects"]


class TestingEmployeeQueryEmployeesObjectsObjects(BaseModel):
    cpr_number: Optional[Any]
    given_name: str
    surname: str
    nickname_given_name: Optional[str]
    nickname_surname: Optional[str]
    validity: "TestingEmployeeQueryEmployeesObjectsObjectsValidity"
    engagements: List["TestingEmployeeQueryEmployeesObjectsObjectsEngagements"]
    addresses: List["TestingEmployeeQueryEmployeesObjectsObjectsAddresses"]
    itusers: List["TestingEmployeeQueryEmployeesObjectsObjectsItusers"]


class TestingEmployeeQueryEmployeesObjectsObjectsValidity(BaseModel):
    from_: Optional[datetime] = Field(alias="from")
    to: Optional[datetime]


class TestingEmployeeQueryEmployeesObjectsObjectsEngagements(BaseModel):
    user_key: str
    org_unit: List["TestingEmployeeQueryEmployeesObjectsObjectsEngagementsOrgUnit"]
    job_function: "TestingEmployeeQueryEmployeesObjectsObjectsEngagementsJobFunction"
    engagement_type: "TestingEmployeeQueryEmployeesObjectsObjectsEngagementsEngagementType"
    primary: Optional["TestingEmployeeQueryEmployeesObjectsObjectsEngagementsPrimary"]
    validity: "TestingEmployeeQueryEmployeesObjectsObjectsEngagementsValidity"


class TestingEmployeeQueryEmployeesObjectsObjectsEngagementsOrgUnit(BaseModel):
    user_key: str


class TestingEmployeeQueryEmployeesObjectsObjectsEngagementsJobFunction(BaseModel):
    user_key: str


class TestingEmployeeQueryEmployeesObjectsObjectsEngagementsEngagementType(BaseModel):
    user_key: str


class TestingEmployeeQueryEmployeesObjectsObjectsEngagementsPrimary(BaseModel):
    user_key: str


class TestingEmployeeQueryEmployeesObjectsObjectsEngagementsValidity(BaseModel):
    from_: datetime = Field(alias="from")
    to: Optional[datetime]


class TestingEmployeeQueryEmployeesObjectsObjectsAddresses(BaseModel):
    value: str
    address_type: "TestingEmployeeQueryEmployeesObjectsObjectsAddressesAddressType"
    engagement: Optional[
        List["TestingEmployeeQueryEmployeesObjectsObjectsAddressesEngagement"]
    ]
    visibility: Optional[
        "TestingEmployeeQueryEmployeesObjectsObjectsAddressesVisibility"
    ]
    validity: "TestingEmployeeQueryEmployeesObjectsObjectsAddressesValidity"


class TestingEmployeeQueryEmployeesObjectsObjectsAddressesAddressType(BaseModel):
    user_key: str


class TestingEmployeeQueryEmployeesObjectsObjectsAddressesEngagement(BaseModel):
    user_key: str


class TestingEmployeeQueryEmployeesObjectsObjectsAddressesVisibility(BaseModel):
    user_key: str


class TestingEmployeeQueryEmployeesObjectsObjectsAddressesValidity(BaseModel):
    from_: datetime = Field(alias="from")
    to: Optional[datetime]


class TestingEmployeeQueryEmployeesObjectsObjectsItusers(BaseModel):
    user_key: str
    itsystem: "TestingEmployeeQueryEmployeesObjectsObjectsItusersItsystem"
    engagement: Optional[
        List["TestingEmployeeQueryEmployeesObjectsObjectsItusersEngagement"]
    ]
    validity: "TestingEmployeeQueryEmployeesObjectsObjectsItusersValidity"


class TestingEmployeeQueryEmployeesObjectsObjectsItusersItsystem(BaseModel):
    user_key: str


class TestingEmployeeQueryEmployeesObjectsObjectsItusersEngagement(BaseModel):
    user_key: str


class TestingEmployeeQueryEmployeesObjectsObjectsItusersValidity(BaseModel):
    from_: datetime = Field(alias="from")
    to: Optional[datetime]


TestingEmployeeQuery.update_forward_refs()
TestingEmployeeQueryEmployees.update_forward_refs()
TestingEmployeeQueryEmployeesObjects.update_forward_refs()
TestingEmployeeQueryEmployeesObjectsObjects.update_forward_refs()
TestingEmployeeQueryEmployeesObjectsObjectsValidity.update_forward_refs()
TestingEmployeeQueryEmployeesObjectsObjectsEngagements.update_forward_refs()
TestingEmployeeQueryEmployeesObjectsObjectsEngagementsOrgUnit.update_forward_refs()
TestingEmployeeQueryEmployeesObjectsObjectsEngagementsJobFunction.update_forward_refs()
TestingEmployeeQueryEmployeesObjectsObjectsEngagementsEngagementType.update_forward_refs()
TestingEmployeeQueryEmployeesObjectsObjectsEngagementsPrimary.update_forward_refs()
TestingEmployeeQueryEmployeesObjectsObjectsEngagementsValidity.update_forward_refs()
TestingEmployeeQueryEmployeesObjectsObjectsAddresses.update_forward_refs()
TestingEmployeeQueryEmployeesObjectsObjectsAddressesAddressType.update_forward_refs()
TestingEmployeeQueryEmployeesObjectsObjectsAddressesEngagement.update_forward_refs()
TestingEmployeeQueryEmployeesObjectsObjectsAddressesVisibility.update_forward_refs()
TestingEmployeeQueryEmployeesObjectsObjectsAddressesValidity.update_forward_refs()
TestingEmployeeQueryEmployeesObjectsObjectsItusers.update_forward_refs()
TestingEmployeeQueryEmployeesObjectsObjectsItusersItsystem.update_forward_refs()
TestingEmployeeQueryEmployeesObjectsObjectsItusersEngagement.update_forward_refs()
TestingEmployeeQueryEmployeesObjectsObjectsItusersValidity.update_forward_refs()
